@Entity
@Table(name = "co_pr")
public class ConfigProperty {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    
    @Column(name = "component", nullable = false)
    private int component;
    
    @Column(name = "service", nullable = false)
    private String service;
    
    @Column(name = "name", nullable = false)
    private String name;
    
    @Column(name = "value_type", nullable = false)
    private int valueType;
    
    @Column(name = "desc")
    private String desc;
    
    @Column(name = "secure")
    private boolean secure;
    
    @Column(name = "db_create_on", nullable = false)
    private Timestamp dbCreateOn;
    
    @Column(name = "db_last_change", nullable = false)
    private Timestamp dbLastChange;
    
    @OneToMany(mappedBy = "configProperty", cascade = CascadeType.ALL)
    private List<ConfigEntry> configEntries;

    // Getters and setters
}

@Entity
@Table(name = "co_en")
public class ConfigEntry {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    
    @ManyToOne
    @JoinColumn(name = "config_prop_id", nullable = false)
    private ConfigProperty configProperty;
    
    @Column(name = "level_type", nullable = false)
    private int levelType;
    
    @Column(name = "level", nullable = false)
    private int level;
    
    @Column(name = "value", nullable = false)
    private String value;
    
    @Column(name = "db_create_on", nullable = false)
    private Timestamp dbCreateOn;
    
    @Column(name = "db_last_change", nullable = false)
    private Timestamp dbLastChange;

    // Getters and setters
}


@Repository
public interface CoPrRepository extends JpaRepository<CoPr, Integer> {
}


@Repository
public interface CoEnRepository extends JpaRepository<CoEn, Integer> {
}



@Service
public class ConfigService {
 
    @Autowired
    private ConfigPropRepository configPropRepository;
 
    @Autowired
    private ConfigEnvRepository configEnvRepository;
 
    public ConfigProp saveConfigProp(ConfigProp configProp) {
        return configPropRepository.save(configProp);
    }
 
    public ConfigEnv saveConfigEnv(ConfigEnv configEnv) {
        return configEnvRepository.save(configEnv);
    }
 
    public ConfigProp getConfigPropById(int id) {
        return configPropRepository.findById(id).orElse(null);
    }
 
    public ConfigEnv getConfigEnvById(int id) {
        return configEnvRepository.findById(id).orElse(null);
    }
 
    public List<ConfigProp> getAllConfigProps() {
        return configPropRepository.findAll();
    }
 
    public List<ConfigEnv> getAllConfigEnvs() {
        return configEnvRepository.findAll();
    }
 
    public void deleteConfigProp(int id) {
        configPropRepository.deleteById(id);
    }
 
    public void deleteConfigEnv(int id) {
        configEnvRepository.deleteById(id);
    }
}


@RestController
@RequestMapping("/api/config")
public class ConfigController {
    
    private final ConfigService configService;

    @Autowired
    public ConfigController(ConfigService configService) {
        this.configService = configService;
    }

    @GetMapping
    public List<CoPr> getAllConfigs() {
        return configService.getAllConfigs();
    }

    @GetMapping("/{id}")
    public CoPr getConfigById(@PathVariable Long id) {
        return configService.getConfigById(id);
    }

    @PostMapping
    public CoPr createConfig(@RequestBody CoPr coPr) {
        return configService.createConfig(coPr);
    }

    @PutMapping("/{id}")
    public CoPr updateConfig(@PathVariable Long id, @RequestBody CoPr coPr) {
        return configService.updateConfig(id, coPr);
    }

    @DeleteMapping("/{id}")
    public void deleteConfig(@PathVariable Long id) {
        configService.deleteConfig(id);
    }
}

curl -X POST http://localhost:8080/config/property \
-H "Content-Type: application/json" \
-d '{
    "component": 1,
    "service": "service1",
    "name": "property1",
    "valueType": 0,
    "description": "description1",
    "secure": false
}'

curl -X POST http://localhost:8080/config/environment \
-H "Content-Type: application/json" \
-d '{
    "configPropId": 1,
    "levelType": 0,
    "level": 0,
    "value": "value1"
}'


curl -X PUT http://localhost:8080/config/property \
-H "Content-Type: application/json" \
-d '{
    "id": 1,
    "component": 1,
    "service": "service1",
    "name": "property1",
    "valueType": 0,
    "description": "description1",
    "secure": false
}'

curl -X PUT http://localhost:8080/config/environment \
-H "Content-Type: application/json" \
-d '{
    "id": 1,
    "configPropId": 1,
    "levelType": 0,
    "level": 0,
    "value": "value1"
}'
